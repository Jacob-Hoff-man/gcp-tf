name: Terraform Deployment
on:
  workflow_dispatch: # Manually triggered from GitHub UI
  push:
    branches:
      - main
env:
  PROJECT_ID: valid-micron-448222-n5
  COMPUTE_ZONE: us-east1-b
  TF_CONFIGURATION_DIR_PATH: ./tf-part-2
  TF_STATE_GCS_BUCKET: tfstate-bucket
  TF_STATE_GCS_PREFIX: terraform/state

jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCLOUD_SERVICE_ACCOUNT_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: ">= 363.0.0"
          project_id: ${{ env.PROJECT_ID }}

      - name: Set GCP project and zone
        run: |
          gcloud config set project ${{ env.PROJECT_ID }}
          gcloud config set compute/zone ${{ env.COMPUTE_ZONE }}

      - name: Check if Terraform remote backend GCS bucket exists
        run: |
          # Use the gcloud command to check if the GCS bucket exists
          BUCKET_EXISTS=$(gcloud storage buckets describe gs://${{ env.PROJECT_ID }}-${{ env.TF_STATE_GCS_BUCKET }} --format="value(name)" || echo "NOT_FOUND")
          if [[ "$BUCKET_EXISTS" != "NOT_FOUND" ]]; then
            echo "Bucket ${{ env.PROJECT_ID }}-${{ env.TF_STATE_GCS_BUCKET }} exists"
            echo "resource_exists=true" >> $GITHUB_ENV  # Set environment variable to true
          else
            echo "Bucket ${{ env.PROJECT_ID }}-${{ env.TF_STATE_GCS_BUCKET }} does not exist"
            echo "resource_exists=false" >> $GITHUB_ENV  # Set environment variable to false
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10

      - name: Initialize Terraform (Local)
        if: ${{ env.resource_exists == 'false' }}
        run: terraform init -backend=false
        working-directory: ${{env.TF_CONFIGURATION_DIR_PATH}}

      - name: Apply Terraform changes (Local)
        if: ${{ env.resource_exists == 'false' }}
        run: terraform apply -target=google_storage_bucket.remote-backend
        working-directory: ${{env.TF_CONFIGURATION_DIR_PATH}}

      - name: Configure GCS Backend for Terraform state
        run: |
          echo 'terraform {' > backend.tf
          echo '  backend "gcs" {' >> backend.tf
          echo '    bucket = "${{ env.PROJECT_ID }}-${{ env.TF_STATE_GCS_BUCKET }}"' >> backend.tf
          echo '    prefix = "terraform/state"' >> backend.tf
          echo '  }' >> backend.tf
          echo '}' >> backend.tf
        working-directory: ${{env.TF_CONFIGURATION_DIR_PATH}}

      - name: Initialize Terraform (Remote)
        run: terraform init -backend-config="bucket=${{ env.PROJECT_ID }}-${{ env.TF_STATE_GCS_BUCKET }}" -backend-config="prefix=${{ env.TF_STATE_GCS_PREFIX }}"
        working-directory: ${{env.TF_CONFIGURATION_DIR_PATH}}

      - name: Validate Terraform configuration (Remote)
        run: terraform validate
        working-directory: ${{env.TF_CONFIGURATION_DIR_PATH}}

      - name: Plan Terraform deployment (Remote)
        run: terraform plan -out=tfplan
        working-directory: ${{env.TF_CONFIGURATION_DIR_PATH}}

      - name: Apply Terraform changes (Remote)
        run: terraform apply -auto-approve tfplan
        working-directory: ${{env.TF_CONFIGURATION_DIR_PATH}}

      - name: Clean up Terraform artifacts
        run: rm -f tfplan
